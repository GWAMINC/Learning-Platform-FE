import { io } from "socket.io-client";

const API_BASE = "http://localhost:8084/api/chat";
const SOCKET_BASE = "http://localhost:5001";

const socket = io(SOCKET_BASE, {
    transports: ["websocket"],
    autoConnect: false,
});

// âœ… NgÄƒn cháº·n sá»± kiá»‡n bá»‹ láº·p báº±ng cÃ¡ch xÃ³a listener cÅ©
const setupSocketListeners = () => {
    socket.off("receiveMessage"); // ðŸ”¥ XÃ³a listener cÅ© trÆ°á»›c khi Ä‘Äƒng kÃ½ má»›i
    socket.on("receiveMessage", (message) => {
        console.log("ðŸ“© Tin nháº¯n má»›i:", message);
    });
};

// âœ… Gá»­i tin nháº¯n
const sendMessage = (chatRoomId, sender, content) => {
    if (!socket.connected) {
        console.error("âš  KhÃ´ng thá»ƒ gá»­i tin nháº¯n vÃ¬ WebSocket chÆ°a káº¿t ná»‘i.");
        return;
    }
    socket.emit("sendMessage", { chatRoomId, sender, content });
};

// âœ… API láº¥y tin nháº¯n cÅ©
const getOldMessages = async (chatRoomId) => {
    const response = await fetch(`${API_BASE}/messages/${chatRoomId}`);
    return response.json();
};

// âœ… API táº¡o chatroom
const createOrGetChatRoom = async (user1, user2) => {
    const response = await fetch(`${API_BASE}/chatroom?user1=${user1}&user2=${user2}`, {
        method: "POST",
    });
    return response.json();
};

export default { socket, setupSocketListeners, sendMessage, getOldMessages, createOrGetChatRoom };
